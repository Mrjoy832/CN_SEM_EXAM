College of Engineering and Management, Kolaghat
Network Laboratory, ( Summer Semester, 2017, CSE)
Experiment: Simple Server
------------------------------ Snip -----------------------------------------------
/*****************************************************************************/
/*** simple-server.c                                                       ***/
/***                                                                       ***/
/*****************************************************************************/

/**************************************************************************
*	This is a simple echo server.  This demonstrates the steps to set up
*	a streaming server.
**************************************************************************/
#include <stdio.h>
#include <errno.h>
#include <sys/socket.h>
#include <resolv.h>
#include <arpa/inet.h>
#include <errno.h>
#include <stdlib.h>

#define MY_PORT		9999
#define MAXBUF		1024

int main(int Count, char *Strings[])
{   int sockfd;
	struct sockaddr_in self;
	char buffer[MAXBUF];

	/*---Create streaming socket---*/
    if ( (sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0 )
	{
		perror("Socket");
		exit(errno);
	}

	/*---Initialize address/port structure---*/
	bzero(&self, sizeof(self));
	self.sin_family = AF_INET;
	self.sin_port = htons(MY_PORT);
	self.sin_addr.s_addr = INADDR_ANY;

	/*---Assign a port number to the socket---*/
    if ( bind(sockfd, (struct sockaddr*)&self, sizeof(self)) != 0 )
	{
		perror("socket--bind");
		exit(errno);
	}

	/*---Make it a "listening socket"---*/
	if ( listen(sockfd, 20) != 0 )
	{
		perror("socket--listen");
		exit(errno);
	}

	/*---Forever... ---*/
	while (1)
	{	int clientfd;
		struct sockaddr_in client_addr;
		int addrlen=sizeof(client_addr);

		/*---accept a connection (creating a data pipe)---*/
		clientfd = accept(sockfd, (struct sockaddr*)&client_addr, &addrlen);
		printf("%s:%d connected\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));

		/*---Echo back anything sent---*/
		send(clientfd, buffer, recv(clientfd, buffer, MAXBUF, 0), 0);

		/*---Close data connection---*/
		close(clientfd);
	}

	/*---Clean up (should never get here!)---*/
	close(sockfd);
	return 0;
}
---------------------------------- Snip ------------------------------------------------

Test this server with the client given below:
---------------------------------- Snip ------------------------------------------------
/*****************************************************************************/
/*** test-port-client.c                                                    ***/
/***                                                                       ***/
/*****************************************************************************/

/**************************************************************************
*	This is a port-read client.  It will accept any IP address and port
*	number on the commandline, connect to the server, send the message
*	(if any defined), read the reply, and close.
**************************************************************************/
#include <stdarg.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <sys/socket.h>
#include <resolv.h>
#include <errno.h>
#include <stdlib.h>

#define MAXBUF	1024

int main(int Count, char *Strings[])
{	int sockfd, bytes_read;
	struct sockaddr_in dest;
	char buffer[MAXBUF];

	/*---Make sure we have the right number of parameters---*/
	if ( Count < 3  ||  Count > 4 )
	{
		fprintf(stderr, "usage: %s <IP-addr> <port> [<send-msg>]\n", Strings[0]);
		exit(0);
	}

	/*---Create socket for streaming---*/
	if ( (sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0 )
	{
		perror("Socket");
		exit(errno);
	}

	/*---Initialize server address/port struct---*/
	bzero(&dest, sizeof(dest));
	dest.sin_family = AF_INET;
	if ( inet_aton(Strings[1], &dest.sin_addr) == 0 )
	{
		perror(Strings[1]);
		exit(errno);
	}
	dest.sin_port = htons(atoi(Strings[2]));

	/*---Connect to server---*/
	if ( connect(sockfd, (struct sockaddr *)&dest, sizeof(dest)) != 0 )
	{
		perror("Connect");
		exit(errno);
	}

	/*---If there is a message to send server, send it with a '\n' (newline)---*/
	if ( Count == 4 )
	{
		sprintf(buffer, "%s\n", Strings[3]);
		send(sockfd, buffer, strlen(buffer), 0);
	}

	/*---While there's data, read and print it---*/
	do
	{
		bzero(buffer, MAXBUF);
		bytes_read = recv(sockfd, buffer, MAXBUF, 0);
		if ( bytes_read > 0 )
			printf("%s", buffer);
	}
	while ( bytes_read > 0 );

	/*---Clean up---*/
	close(sockfd);
	return 0;
}
---------------------------------- Snip ------------------------------------------------

Assignment:
This server echos only once. Modify the server so that it will continuously echo the message
send by the client unless it receive string "EXIT" from client and close connection.
Also modify the client suitably to test the above server.